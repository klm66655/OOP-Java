1.

package mooc;
import mooc.ui.UserInterface;
import mooc.logic.ApplicationLogic;

public class Main {
    public static void main(String[] args) {
        UserInterface ui = new TextUserInterface();
        new ApplicationLogic(ui).execute(3);
    }
}

// UserInterface.java
package mooc.ui;

public interface UserInterface {
    void update();
}

// TextUserInterface.java
package mooc.ui;

public class TextUserInterface implements UserInterface {
    @Override
    public void update() {
        System.out.println("Updating the user interface");
    }
}

// ApplicationLogic.java
package mooc.logic;

import mooc.ui.UserInterface;

public class ApplicationLogic {
    private UserInterface ui;

    public ApplicationLogic(UserInterface ui) {
        this.ui = ui;
    }

    public void execute(int howManyTimes) {
        for (int i = 0; i < howManyTimes; i++) {
            System.out.println("The application logic works");
            ui.update();
        }
    }
}


2.


public class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        if (name == null || name.isEmpty() || name.length() > 40) {
            throw new IllegalArgumentException("Name is invalid");
        }
        if (age < 0 || age > 120) {
            throw new IllegalArgumentException("Age is invalid");
        }
        this.name = name;
        this.age = age;
    }
    
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}


4.

public class Printer {
    private String fileName;

    public Printer(String fileName) throws FileNotFoundException {
        this.fileName = fileName;
        File file = new File(fileName);

        if (!file.exists()) {
            throw new FileNotFoundException("The file " + fileName + " does not exist");
        }
    }

    public void printLinesWhichContain(String word) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(this.fileName));
        String line;

        while ((line = reader.readLine()) != null) {
            if (line.contains(word)) {
                System.out.println(line);
            }
        }
    }
}


5.

package file;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Analysis {
    private File file;
    private int lines;
    private int characters;

    public Analysis(File file) {
        this.file = file;
        this.lines = 0;
        this.characters = 0;
    }

    public int lines() throws FileNotFoundException {
        Scanner scanner = new Scanner(file);

        while (scanner.hasNextLine()) {
            this.lines++;
            this.characters += scanner.nextLine().length() + 1;
        }
        scanner.close();

        return this.lines;
    }

    public int characters() throws FileNotFoundException {
        if (this.characters == 0) {
            this.lines();
        }
        return this.characters;
    }
}


6.

public class PersonalMultipleEntryDictionary implements MultipleEntryDictionary {
    private Map<String, Set<String>> dictionary;

    public PersonalMultipleEntryDictionary() {
        this.dictionary = new HashMap<String, Set<String>>();
    }

    public void add(String word, String entry) {
        Set<String> entries;
        if (this.dictionary.containsKey(word)) {
            entries = this.dictionary.get(word);
        } else {
            entries = new HashSet<String>();
        }
        entries.add(entry);
        this.dictionary.put(word, entries);
    }

    public Set<String> translate(String word) {
        if (this.dictionary.containsKey(word)) {
            return this.dictionary.get(word);
        }
        return null;
    }

    public void remove(String word) {
        if (this.dictionary.containsKey(word)) {
            this.dictionary.remove(word);
        }
    }
}


7.

import java.util.HashSet;
import java.util.Set;

public class PersonalDuplicateRemover implements DuplicateRemover {
    
    private Set<String> characterStrings;
    private int duplicates;

    public PersonalDuplicateRemover() {
        this.characterStrings = new HashSet<String>();
        this.duplicates = 0;
    }

    @Override
    public void add(String characterString) {
        if (!characterStrings.contains(characterString)) {
            characterStrings.add(characterString);
        } else {
            duplicates++;
        }
    }

    @Override
    public int getNumberOfDetectedDuplicates() {
        return duplicates;
    }

    @Override
    public Set<String> getUniqueCharacterStrings() {
        return characterStrings;
    }

    @Override
    public void empty() {
        characterStrings.clear();
        duplicates = 0;
    }
}

